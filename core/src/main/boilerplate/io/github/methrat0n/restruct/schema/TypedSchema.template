package io.github.methrat0n.restruct.schema

import io.github.methrat0n.restruct.core.Program
import io.github.methrat0n.restruct.core.data.constraints.Constraint
import io.github.methrat0n.restruct.core.data.schema.FieldAlgebra

import scala.language.higherKinds

trait TypedSchema[A] extends Schema[A] {
    def bind[FORMAT[_]](algebra: FieldAlgebra[FORMAT]): FORMAT[A] =
      program.run(algebra)

    def program: Program[FieldAlgebra, A]

    override def constraintedBy(constraint: Constraint[A]): Schema[A] = TypedSchema(program, constraints :+ constraint)
  }

object TypedSchema {
  def apply[A](prgram: Program[FieldAlgebra, A], constaints: List[Constraint[A]]): TypedSchema[A] = new TypedSchema[A]() {
    override def program: Program[FieldAlgebra, A] = prgram
    override def constraints: List[Constraint[A]] = constaints
  }

  def apply[Type](program: Program[FieldAlgebra, Type]): Schema[Type] = TypedSchema(program, List.empty)
}
package io.github.methrat0n.restruct.schema

import io.github.methrat0n.restruct.core.data.constraints.Constraint
import io.github.methrat0n.restruct.core.data.schema.FieldAlgebra
import io.github.methrat0n.restruct.schema.CoproductSchema._
import io.github.methrat0n.restruct.schema.ProductSchema._
import shapeless.{::, Generic, HNil}

import scala.language.higherKinds

trait SchemaConstructor[TYPE_CONSTRUCTOR[_]] {
  def of[A](schema: Schema[A]): Schema[TYPE_CONSTRUCTOR[A]]
}

trait Schema[A] {
  def constraints: List[Constraint[A]]
  def constraintedBy(constraint: Constraint[A]): Schema[A]
  def bind[FORMAT[_]](algebra: FieldAlgebra[FORMAT]): FORMAT[A]
}

object Schema {
  [..5#def apply[Type <: Product, [#Field_1#]]([#field1: Field[Field_1]#])(implicit generic: Generic.Aux[Type,[#Field_1# :: ] :: HNil]): Schema[Type] = new ProductSchema1[Type, [#Field_1#]]([#field1#], List.empty)#
  ]

  def apply[Type, Product_1 <: Type](schema1: Schema[Product_1]): Schema[Type] = schema1.asInstanceOf[Schema[Type]]
  [2..5#def apply[Type, [#Product_1 <: Type#]]([#schema1: Schema[Product_1]#])(implicit [#manifest1: Manifest[Product_1]#]): Schema[Type] = CoproductSchema1([#schema1#], List.empty)#
  ]
}

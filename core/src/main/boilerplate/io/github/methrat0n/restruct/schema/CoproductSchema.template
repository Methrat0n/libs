package io.github.methrat0n.restruct.schema

import io.github.methrat0n.restruct.core.data.constraints.Constraint
import io.github.methrat0n.restruct.core.data.schema.FieldAlgebra

import scala.language.higherKinds

sealed trait CoproductSchema[T] extends Schema[T]

object CoproductSchema {

[2..5#
  final case class CoproductSchema1[Type, [#Product_1 <: Type#]](
    [#product1: Schema[Product_1],#
    ]
    constraints: List[Constraint[Type]]
  )(implicit
    [#manifest1: Manifest[Product_1]#,
    ]
  ) extends Schema[Type] {
    override def constraintedBy(constraint: Constraint[Type]): Schema[Type] =
      copy(constraints = constraints :+ constraint)

    override def bind[FORMAT[_]](algebra: FieldAlgebra[FORMAT]): FORMAT[Type] =
      algebra.verifying(algebra.imap(
        [#algebra.either(product1.bind(algebra)#], algebra.pure(())[# #)])
      )({
        case Left(product)  => product
        [2..#case [2..#Right(# ]Left(product)[2..# #)]) => product#
        ]
        case [#Right(# ]_: Unit[# #)]) => throw new RuntimeException("unable to find a matching schema") //TODO better error message
      })({
        [#case product: Product_1 => [2..#Right(# ]Left(product)[# #)]#
        ]
      }), constraints)
  }#
]
}